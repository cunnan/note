数据结构概述
	 定义
		 数据如何保存在内存里
		 我们如何把现实中大量而复杂的问题以特定的数据类型和特定
		 的存储结构保存到内存中，以及在此基础上为实现某个功能而
		 执行的相应操作（比如查找某个元素，对所有元素进行排
		 序），这个相应的操作叫做算法
		 数据结构=数据+数据的关系
		 算法=对存储数据的操作->狭义的算法（广义的算法）
		  算法
			狭义的算法是与数据的存储方式密切相关
			广义的算法是与数据的存储方式无关
				泛型
					利用某种技术达到的效果是：不同的存储方式，执行的操作是一样的。
					重载技术
		 推荐书籍
			 严蔚敏
			 吴伟民
				 伪算法
			 高一凡
				 实现了伪算法
	 算法
		 解题的方法和步骤
		 衡量算法的标准
			 1.时间复杂度
				 大概程序要执行的次数，而非执行的时间
			 2.空间复杂度
				 算法执行过程中大概所占用的最大内存
			 3.难易程度
			 4.健壮性
	 数据结构的地位
		 数据结构是软件中最核心的课程
		 程序=数据的存储+数据的操作+可以被计算机执行的语言
				 
预备知识
	 指针
		 指针的重要性
			 指针是C语言的灵魂
		 定义
			 地址
				 内存单元的编号
				 从0开始的非负整数
				 范围：0--FFFFFFFF(4G-1)
			 指针
				 指针就是地址，地址就是指针
				 指针变量是存放内存单元地址的变量
				 指针本质是一个操作受限的非负整数
			 分类
			 1.基本类型指针
			 2.指针和一维数组的关系
		 cpu与内存
				 地址线
					 内存编号0、1、2、...4G-1
				 控制线
					 读、写、只读、只写..
				 数据线
					 数据传输

	 结构体
		 表示复杂的数据，普通的基本类型无法满足要求
		 结构体是用户根据实际需要自己定义的数据类型
	 动态内存的分配和释放
模块一：线性结构 一个班的学生信息
	 连续存储[数组]
		a[3]=*(a+3);数组a的名称a中存放的是第一个元
		素的地址，a+3是第四个元素的地址
	 离散存储[链表]
		定义
			 n个节点离散存储
			 彼此通过指针相连
			 每个节点只有一个前驱节点 每个节点只有一个后驱节点
			 首节点没有前驱节点，尾节点没有后续节点
			 专业术语
				首节点
					第一个有效节点
				尾节点
					最后一个有效节点
				头结点
					首节点前面的节点
					头结点不存放有效数据
					方便对链表的操作
				头指针
					指向头结点的指针变量
				尾指针
					指向尾节点的指针变量
		分类
			单链表
			双链表
			循环链表
			非循环链表

	 线性结构的两种常见应用之一栈
		定义
			内存 静态内存在栈里存放，动态内存在堆里存放
			一种可以实现先进后出的存储结构
			类似于箱子
		分类
			静态栈
			动态栈
		算法
		应用
			函数调用
			中断
			表达式求值
			内存分配
			缓冲处理
			迷宫
	 线性结构的两种常见应用之二队列
		定义
			一种可以实现先进先出的存储结构
		分类
			链式队列--用链表实现
			静态队列--用数组实现
				静态队列通常都必须是循环队列
				循环队列的讲解
					静态队列为什么必须是循环队列
					循环队列需要几个参数来确定
					循环队列各个参数的含义
					循环队列入队伪算法
					循环队列出对伪算法
					如何判断循环队列为空
					如何判断循环队列是否已满
		应用
			所有和时间有关的操作都有队列的影子
	 专题：递归
		定义
			一个函数自己直接或间接调用自己
		递归满足三个条件
			有一个明确的终止条件
			规模是递减的
			这个转化是可解的
		循环和递归的关系
			递归
				易于理解
				速度慢
				存储空间大
			循环
				不易理解
				速度快
				存储空间小
		递归的应用
			树和森林是以递归的方式定义的
			树和图的很多算法都是以递归实现的
			很多数学公式就是以递归的方式定义的
				斐波拉契数列
					1 1 2 3 5 8...
		 1.1+2+3+4+...100之和
		 2.求阶乘
		 3.汉诺塔
		 4.走迷宫
模块二：非线性结构
	 树 人事系统
		定义
			专业定义
				有且只有一个称为根的节点
				有若干个互不相交的子树，这些子树本身也是一棵树
			通俗的定义
				树是由节点和边组成
				每个节点只有一个父节点，可以有多个子节点
				根节点没有父节点
			专业术语
				节点
				父节点
				子节点
				深度 丛根节点到最底层节点的层数 根节点是第一层
				叶子节点 没有子节点的节点
				非终端节点 非叶子节点
				度 子节点的个数

		分类
			一般树
				任意一个节点的子节点的个数不受限制
			二叉树
				任意一个节点的子节点的个数最多有两个，且字节点的位置不可更改 左子树 右子树
				二叉树分类
					一般二叉树
					满二叉树
						在不增加树层数的前提下，无法再多添加一个子节点的二叉树
					完全二叉树
						如果只是删除了满二叉树最底层最右边的连续的若干个节点，这样形成的二叉树叫做完全二叉树
					满二叉树是完全二叉树的特例
					
			森林
				n个互不相交的树的集合
		树的存储
			二叉树的存储
				连续存储（完全二叉树）将一般二叉树转换为完全二叉树
					转换方式 三种 先序遍历 中序遍历 后序遍历
					优点
						查找某个节点的父节点和子节点速度很快 （包括判断有没有子节点）
					缺点
						很耗内存
				链式存储
					数据域 左孩子 右孩子
			一般树的存储
				双亲表示法
					求父节点方便
				孩子表示法
					求子节点方便
				双亲孩子表示法
					求父节点和子节点都很方便
				二叉树表示法
					把一般树转换成二叉树存储
					方法
						设法保证任意一个节点的左指针域指向他的第一个孩子
						右指针域指向他的下一个兄弟
						一个普通树转换成的二叉树一定没有右子树
			森林的存储
				把森林转换成二叉树
				方法
					森林的各个树的根节点作为兄弟，然后按照一般树转换成二叉树的方法去将森林转换成二叉树
		操作
			遍历
				先序遍历（先访问根节点）
					先访问根节点
					再先序访问左子树
					再先序访问右子树
				中序遍历（中间访问跟节点）
					中序访问左子树
					再访问根节点
					再中序访问右子树
				后序遍历（最后访问跟节点）
					后序遍历左子树
					再后序遍历右子树
					再后续遍历根节点
			已知两种遍历序列求原始二叉树
				已知先序和后序 不能推出原始二叉树
				已知先序和中序 、已知中序和后序可以推出原始二叉树
		应用
			树是数据库中数据组织的一种重要形式
			操作系统子父进程的关系本身就是一颗树
			面向对象语言中类的继承关系本身也是一颗树
			赫夫曼树
	 图 交通图
模块三：查找和排序
	 折半查找
	 排序：
		 冒泡
		 插入
		 选择
		 快速排序
		 归并排序
	 排序和查找的关系
		排序是查找的前提
		排序是重点

java中容器和数据结构相关知识
	 interater接口
	 map
		 哈希表
	 








数据结构复习
	狭义
		数据结构是专门研究数据存储的问题
		数据的存储包含两方面 个体的存储和个体关系的存储
	广义
		数据结构既包含数据的存储也包含数据的操作
		对存储数据的操作就是算法
	算法
		狭义
			算法是和数据的存储方式密切相关
		广义
			算法和数据的存储方式无关
			这就是泛型思想
	数据的存储结构
		线性
			连续存储 数组
				优点
					存取速度快
				缺点
					插入删除元素很慢
					空间通常有限制
					需要连续的大块内存
					事先必须知道数组的长度
			离散存储 链表
				优点
					空间没有限制
					插入删除元素很快
				缺点
					存取速度慢
			线性结构的应用
				栈
				队列
		非线性
			树
			图
	再次讨论什么事数据结构
		数据结构研究是数据的存储和数据的操作的一门学科
		数据的存储分为两部分
			个体的存储
			个体关系的存储
			从某个角度而言，数据的存储最核心的就是个体关系的存储，个体的存储可以忽略不计
	再次讨论什么是泛型
		同一种逻辑结构，无论该逻辑结构物理结构存储是什么样的，我们可以对他执行相同的操作
